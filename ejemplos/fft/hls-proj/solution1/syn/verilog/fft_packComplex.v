// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft_packComplex (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        dst_din,
        dst_full_n,
        dst_write,
        eos_din,
        eos_full_n,
        eos_write,
        real_in_TDATA,
        real_in_TVALID,
        real_in_TREADY,
        real_in_TKEEP,
        real_in_TLAST,
        imag_in_TDATA,
        imag_in_TVALID,
        imag_in_TREADY,
        imag_in_TKEEP,
        imag_in_TLAST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [127:0] dst_din;
input   dst_full_n;
output   dst_write;
output  [0:0] eos_din;
input   eos_full_n;
output   eos_write;
input  [63:0] real_in_TDATA;
input   real_in_TVALID;
output   real_in_TREADY;
input  [7:0] real_in_TKEEP;
input  [0:0] real_in_TLAST;
input  [63:0] imag_in_TDATA;
input   imag_in_TVALID;
output   imag_in_TREADY;
input  [7:0] imag_in_TKEEP;
input  [0:0] imag_in_TLAST;

reg ap_done;
reg ap_idle;
reg start_write;
reg dst_write;
reg[0:0] eos_din;
reg eos_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    dst_blk_n;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp0_stage0;
reg    eos_blk_n;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_last_V_reg_128;
reg    real_in_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter0;
reg    imag_in_TDATA_blk_n;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_last_V_fu_99_p1;
wire   [63:0] grp_fu_88_p1;
reg   [63:0] a_temp_real_reg_137;
wire   [63:0] grp_fu_91_p1;
reg   [63:0] a_temp_imag_reg_142;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] A_1_cast_i_fu_111_p1;
wire   [63:0] A_0_cast_i_fu_108_p1;
reg    grp_fu_88_ce;
reg    grp_fu_91_ce;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_real_V_data_V_U_apdone_blk;
wire   [63:0] real_in_TDATA_int_regslice;
wire    real_in_TVALID_int_regslice;
reg    real_in_TREADY_int_regslice;
wire    regslice_both_real_V_data_V_U_ack_in;
wire    regslice_both_real_V_keep_V_U_apdone_blk;
wire   [7:0] real_in_TKEEP_int_regslice;
wire    regslice_both_real_V_keep_V_U_vld_out;
wire    regslice_both_real_V_keep_V_U_ack_in;
wire    regslice_both_real_V_last_V_U_apdone_blk;
wire   [0:0] real_in_TLAST_int_regslice;
wire    regslice_both_real_V_last_V_U_vld_out;
wire    regslice_both_real_V_last_V_U_ack_in;
wire    regslice_both_imag_V_data_V_U_apdone_blk;
wire   [63:0] imag_in_TDATA_int_regslice;
wire    imag_in_TVALID_int_regslice;
reg    imag_in_TREADY_int_regslice;
wire    regslice_both_imag_V_data_V_U_ack_in;
wire    regslice_both_imag_V_keep_V_U_apdone_blk;
wire   [7:0] imag_in_TKEEP_int_regslice;
wire    regslice_both_imag_V_keep_V_U_vld_out;
wire    regslice_both_imag_V_keep_V_U_ack_in;
wire    regslice_both_imag_V_last_V_U_apdone_blk;
wire   [0:0] imag_in_TLAST_int_regslice;
wire    regslice_both_imag_V_last_V_U_vld_out;
wire    regslice_both_imag_V_last_V_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

fft_sitodp_64ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sitodp_64ns_64_6_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(real_in_TDATA_int_regslice),
    .ce(grp_fu_88_ce),
    .dout(grp_fu_88_p1)
);

fft_sitodp_64ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sitodp_64ns_64_6_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(imag_in_TDATA_int_regslice),
    .ce(grp_fu_91_ce),
    .dout(grp_fu_91_p1)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_real_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(real_in_TDATA),
    .vld_in(real_in_TVALID),
    .ack_in(regslice_both_real_V_data_V_U_ack_in),
    .data_out(real_in_TDATA_int_regslice),
    .vld_out(real_in_TVALID_int_regslice),
    .ack_out(real_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_real_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_real_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(real_in_TKEEP),
    .vld_in(real_in_TVALID),
    .ack_in(regslice_both_real_V_keep_V_U_ack_in),
    .data_out(real_in_TKEEP_int_regslice),
    .vld_out(regslice_both_real_V_keep_V_U_vld_out),
    .ack_out(real_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_real_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_real_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(real_in_TLAST),
    .vld_in(real_in_TVALID),
    .ack_in(regslice_both_real_V_last_V_U_ack_in),
    .data_out(real_in_TLAST_int_regslice),
    .vld_out(regslice_both_real_V_last_V_U_vld_out),
    .ack_out(real_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_real_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_imag_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(imag_in_TDATA),
    .vld_in(imag_in_TVALID),
    .ack_in(regslice_both_imag_V_data_V_U_ack_in),
    .data_out(imag_in_TDATA_int_regslice),
    .vld_out(imag_in_TVALID_int_regslice),
    .ack_out(imag_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_imag_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_imag_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(imag_in_TKEEP),
    .vld_in(imag_in_TVALID),
    .ack_in(regslice_both_imag_V_keep_V_U_ack_in),
    .data_out(imag_in_TKEEP_int_regslice),
    .vld_out(regslice_both_imag_V_keep_V_U_vld_out),
    .ack_out(imag_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_imag_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_imag_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(imag_in_TLAST),
    .vld_in(imag_in_TVALID),
    .ack_in(regslice_both_imag_V_last_V_U_ack_in),
    .data_out(imag_in_TLAST_int_regslice),
    .vld_out(regslice_both_imag_V_last_V_U_vld_out),
    .ack_out(imag_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_imag_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((eos_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        a_temp_imag_reg_142 <= grp_fu_91_p1;
        a_temp_real_reg_137 <= grp_fu_88_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_128 <= real_in_TLAST_int_regslice;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_last_V_fu_99_p1 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((eos_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dst_blk_n = dst_full_n;
    end else begin
        dst_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dst_write = 1'b1;
    end else begin
        dst_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((tmp_last_V_reg_128 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        eos_blk_n = eos_full_n;
    end else begin
        eos_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((eos_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        eos_din = 1'd1;
    end else if (((tmp_last_V_reg_128 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        eos_din = 1'd0;
    end else begin
        eos_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_last_V_reg_128 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((eos_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        eos_write = 1'b1;
    end else begin
        eos_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_88_ce = 1'b1;
    end else begin
        grp_fu_88_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_91_ce = 1'b1;
    end else begin
        grp_fu_91_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imag_in_TDATA_blk_n = imag_in_TVALID_int_regslice;
    end else begin
        imag_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imag_in_TREADY_int_regslice = 1'b1;
    end else begin
        imag_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((eos_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        real_in_TDATA_blk_n = real_in_TVALID_int_regslice;
    end else begin
        real_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        real_in_TREADY_int_regslice = 1'b1;
    end else begin
        real_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((eos_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_cast_i_fu_108_p1 = a_temp_real_reg_137;

assign A_1_cast_i_fu_111_p1 = a_temp_imag_reg_142;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((imag_in_TVALID_int_regslice == 1'b0) | (real_in_TVALID_int_regslice == 1'b0))) | ((tmp_last_V_reg_128 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (eos_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (dst_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((imag_in_TVALID_int_regslice == 1'b0) | (real_in_TVALID_int_regslice == 1'b0))) | ((tmp_last_V_reg_128 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (eos_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (dst_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((imag_in_TVALID_int_regslice == 1'b0) | (real_in_TVALID_int_regslice == 1'b0))) | ((tmp_last_V_reg_128 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (eos_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (dst_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((imag_in_TVALID_int_regslice == 1'b0) | (real_in_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((tmp_last_V_reg_128 == 1'd0) & (eos_full_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter6 = (dst_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign dst_din = {{A_1_cast_i_fu_111_p1}, {A_0_cast_i_fu_108_p1}};

assign imag_in_TREADY = regslice_both_imag_V_data_V_U_ack_in;

assign real_in_TREADY = regslice_both_real_V_data_V_U_ack_in;

assign start_out = real_start;

assign tmp_last_V_fu_99_p1 = real_in_TLAST_int_regslice;

endmodule //fft_packComplex
