// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft_unpackComplex (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        dst_dout,
        dst_empty_n,
        dst_read,
        eos_dout,
        eos_empty_n,
        eos_read,
        real_out_TDATA,
        real_out_TVALID,
        real_out_TREADY,
        real_out_TKEEP,
        real_out_TLAST,
        imag_out_TDATA,
        imag_out_TVALID,
        imag_out_TREADY,
        imag_out_TKEEP,
        imag_out_TLAST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] dst_dout;
input   dst_empty_n;
output   dst_read;
input  [0:0] eos_dout;
input   eos_empty_n;
output   eos_read;
output  [63:0] real_out_TDATA;
output   real_out_TVALID;
input   real_out_TREADY;
output  [7:0] real_out_TKEEP;
output  [0:0] real_out_TLAST;
output  [63:0] imag_out_TDATA;
output   imag_out_TVALID;
input   imag_out_TREADY;
output  [7:0] imag_out_TKEEP;
output  [0:0] imag_out_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dst_read;
reg eos_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dst_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    eos_blk_n;
reg    real_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    imag_out_TDATA_blk_n;
wire   [0:0] t_last_read_fu_98_p2;
reg   [0:0] t_last_reg_480;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] t_last_reg_480_pp0_iter1_reg;
reg   [0:0] p_Result_7_reg_486;
reg   [0:0] p_Result_7_reg_486_pp0_iter1_reg;
wire   [51:0] trunc_ln315_fu_216_p1;
reg   [51:0] trunc_ln315_reg_491;
wire   [0:0] icmp_ln323_fu_220_p2;
reg   [0:0] icmp_ln323_reg_496;
wire   [0:0] icmp_ln327_fu_236_p2;
reg   [0:0] icmp_ln327_reg_500;
wire   [0:0] icmp_ln329_fu_242_p2;
reg   [0:0] icmp_ln329_reg_504;
wire   [9:0] sh_amt_1_fu_248_p2;
reg   [9:0] sh_amt_1_reg_508;
reg   [3:0] tmp_reg_513;
wire   [0:0] icmp_ln330_fu_264_p2;
reg   [0:0] icmp_ln330_reg_518;
wire   [5:0] trunc_ln331_fu_270_p1;
reg   [5:0] trunc_ln331_reg_522;
reg   [0:0] p_Result_9_reg_527;
reg   [0:0] p_Result_9_reg_527_pp0_iter1_reg;
reg   [51:0] p_Result_5_reg_532;
wire   [0:0] icmp_ln323_1_fu_306_p2;
reg   [0:0] icmp_ln323_1_reg_537;
wire   [0:0] icmp_ln327_1_fu_322_p2;
reg   [0:0] icmp_ln327_1_reg_541;
wire   [0:0] icmp_ln329_1_fu_328_p2;
reg   [0:0] icmp_ln329_1_reg_545;
wire   [9:0] sh_amt_3_fu_334_p2;
reg   [9:0] sh_amt_3_reg_549;
reg   [3:0] tmp_2_reg_554;
wire   [0:0] icmp_ln330_1_fu_350_p2;
reg   [0:0] icmp_ln330_1_reg_559;
wire   [5:0] trunc_ln331_1_fu_356_p1;
reg   [5:0] trunc_ln331_1_reg_563;
wire   [0:0] icmp_ln337_fu_371_p2;
wire   [63:0] shl_ln339_fu_383_p2;
wire   [63:0] zext_ln331_1_fu_398_p1;
wire   [63:0] zext_ln328_fu_402_p1;
wire   [0:0] icmp_ln337_1_fu_417_p2;
wire   [63:0] shl_ln339_1_fu_429_p2;
wire   [63:0] zext_ln331_3_fu_444_p1;
wire   [63:0] zext_ln328_1_fu_448_p1;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] ap_phi_reg_pp0_iter0_ref_tmp6_0_reg_138;
reg   [63:0] ap_phi_reg_pp0_iter1_ref_tmp6_0_reg_138;
reg   [63:0] ap_phi_reg_pp0_iter2_ref_tmp6_0_reg_138;
wire   [63:0] ap_phi_reg_pp0_iter0_ref_tmp10_0_reg_159;
reg   [63:0] ap_phi_reg_pp0_iter1_ref_tmp10_0_reg_159;
reg   [63:0] ap_phi_reg_pp0_iter2_ref_tmp10_0_reg_159;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] p_Result_s_fu_202_p4;
wire   [62:0] trunc_ln145_fu_180_p1;
wire   [11:0] zext_ln311_fu_212_p1;
wire   [11:0] sh_amt_fu_226_p2;
wire   [9:0] trunc_ln326_fu_232_p1;
wire   [10:0] p_Result_4_fu_282_p4;
wire   [62:0] trunc_ln_fu_184_p4;
wire   [11:0] zext_ln311_1_fu_292_p1;
wire   [11:0] sh_amt_2_fu_312_p2;
wire   [9:0] trunc_ln326_1_fu_318_p1;
wire   [52:0] p_Result_8_fu_360_p3;
wire   [63:0] zext_ln338_fu_376_p1;
wire   [63:0] zext_ln339_fu_380_p1;
wire   [53:0] zext_ln320_fu_367_p1;
wire   [53:0] zext_ln331_fu_389_p1;
wire   [53:0] lshr_ln331_fu_392_p2;
wire   [52:0] p_Result_10_fu_406_p3;
wire   [63:0] zext_ln338_1_fu_422_p1;
wire   [63:0] zext_ln339_1_fu_426_p1;
wire   [53:0] zext_ln320_1_fu_413_p1;
wire   [53:0] zext_ln331_2_fu_435_p1;
wire   [53:0] lshr_ln331_1_fu_438_p2;
wire   [63:0] sub_ln455_fu_452_p2;
wire   [63:0] sub_ln455_1_fu_466_p2;
wire    ap_CS_fsm_state6;
wire    regslice_both_real_V_data_V_U_apdone_blk;
wire    regslice_both_imag_V_data_V_U_apdone_blk;
reg    ap_block_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] real_out_TDATA_int_regslice;
reg    real_out_TVALID_int_regslice;
wire    real_out_TREADY_int_regslice;
wire    regslice_both_real_V_data_V_U_vld_out;
wire    regslice_both_real_V_keep_V_U_apdone_blk;
wire    regslice_both_real_V_keep_V_U_ack_in_dummy;
wire    regslice_both_real_V_keep_V_U_vld_out;
wire    regslice_both_real_V_last_V_U_apdone_blk;
wire    regslice_both_real_V_last_V_U_ack_in_dummy;
wire    regslice_both_real_V_last_V_U_vld_out;
wire   [63:0] imag_out_TDATA_int_regslice;
reg    imag_out_TVALID_int_regslice;
wire    imag_out_TREADY_int_regslice;
wire    regslice_both_imag_V_data_V_U_vld_out;
wire    regslice_both_imag_V_keep_V_U_apdone_blk;
wire    regslice_both_imag_V_keep_V_U_ack_in_dummy;
wire    regslice_both_imag_V_keep_V_U_vld_out;
wire    regslice_both_imag_V_last_V_U_apdone_blk;
wire    regslice_both_imag_V_last_V_U_ack_in_dummy;
wire    regslice_both_imag_V_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 64 ))
regslice_both_real_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(real_out_TDATA_int_regslice),
    .vld_in(real_out_TVALID_int_regslice),
    .ack_in(real_out_TREADY_int_regslice),
    .data_out(real_out_TDATA),
    .vld_out(regslice_both_real_V_data_V_U_vld_out),
    .ack_out(real_out_TREADY),
    .apdone_blk(regslice_both_real_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_real_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(8'd255),
    .vld_in(real_out_TVALID_int_regslice),
    .ack_in(regslice_both_real_V_keep_V_U_ack_in_dummy),
    .data_out(real_out_TKEEP),
    .vld_out(regslice_both_real_V_keep_V_U_vld_out),
    .ack_out(real_out_TREADY),
    .apdone_blk(regslice_both_real_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_real_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(t_last_reg_480_pp0_iter1_reg),
    .vld_in(real_out_TVALID_int_regslice),
    .ack_in(regslice_both_real_V_last_V_U_ack_in_dummy),
    .data_out(real_out_TLAST),
    .vld_out(regslice_both_real_V_last_V_U_vld_out),
    .ack_out(real_out_TREADY),
    .apdone_blk(regslice_both_real_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_imag_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(imag_out_TDATA_int_regslice),
    .vld_in(imag_out_TVALID_int_regslice),
    .ack_in(imag_out_TREADY_int_regslice),
    .data_out(imag_out_TDATA),
    .vld_out(regslice_both_imag_V_data_V_U_vld_out),
    .ack_out(imag_out_TREADY),
    .apdone_blk(regslice_both_imag_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_imag_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(8'd255),
    .vld_in(imag_out_TVALID_int_regslice),
    .ack_in(regslice_both_imag_V_keep_V_U_ack_in_dummy),
    .data_out(imag_out_TKEEP),
    .vld_out(regslice_both_imag_V_keep_V_U_vld_out),
    .ack_out(imag_out_TREADY),
    .apdone_blk(regslice_both_imag_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_imag_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(t_last_reg_480_pp0_iter1_reg),
    .vld_in(imag_out_TVALID_int_regslice),
    .ack_in(regslice_both_imag_V_last_V_U_ack_in_dummy),
    .data_out(imag_out_TLAST),
    .vld_out(regslice_both_imag_V_last_V_U_vld_out),
    .ack_out(imag_out_TREADY),
    .apdone_blk(regslice_both_imag_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((regslice_both_imag_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_real_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln330_1_reg_559 == 1'd0) & (icmp_ln329_1_reg_545 == 1'd1) & (icmp_ln327_1_reg_541 == 1'd0) & (icmp_ln323_1_reg_537 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln323_1_reg_537 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln337_1_fu_417_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln329_1_reg_545 == 1'd0) & (icmp_ln327_1_reg_541 == 1'd0) & (icmp_ln323_1_reg_537 == 1'd0)))) begin
        ap_phi_reg_pp0_iter2_ref_tmp10_0_reg_159 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln337_1_fu_417_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln329_1_reg_545 == 1'd0) & (icmp_ln327_1_reg_541 == 1'd0) & (icmp_ln323_1_reg_537 == 1'd0))) begin
        ap_phi_reg_pp0_iter2_ref_tmp10_0_reg_159 <= shl_ln339_1_fu_429_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln330_1_reg_559 == 1'd1) & (icmp_ln329_1_reg_545 == 1'd1) & (icmp_ln327_1_reg_541 == 1'd0) & (icmp_ln323_1_reg_537 == 1'd0))) begin
        ap_phi_reg_pp0_iter2_ref_tmp10_0_reg_159 <= zext_ln331_3_fu_444_p1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln327_1_reg_541 == 1'd1) & (icmp_ln323_1_reg_537 == 1'd0))) begin
        ap_phi_reg_pp0_iter2_ref_tmp10_0_reg_159 <= zext_ln328_1_fu_448_p1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_ref_tmp10_0_reg_159 <= ap_phi_reg_pp0_iter1_ref_tmp10_0_reg_159;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln337_fu_371_p2 == 1'd0) & (icmp_ln329_reg_504 == 1'd0) & (icmp_ln327_reg_500 == 1'd0) & (icmp_ln323_reg_496 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln330_reg_518 == 1'd0) & (icmp_ln329_reg_504 == 1'd1) & (icmp_ln327_reg_500 == 1'd0) & (icmp_ln323_reg_496 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln323_reg_496 == 1'd1)))) begin
        ap_phi_reg_pp0_iter2_ref_tmp6_0_reg_138 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln337_fu_371_p2 == 1'd1) & (icmp_ln329_reg_504 == 1'd0) & (icmp_ln327_reg_500 == 1'd0) & (icmp_ln323_reg_496 == 1'd0))) begin
        ap_phi_reg_pp0_iter2_ref_tmp6_0_reg_138 <= shl_ln339_fu_383_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln330_reg_518 == 1'd1) & (icmp_ln329_reg_504 == 1'd1) & (icmp_ln327_reg_500 == 1'd0) & (icmp_ln323_reg_496 == 1'd0))) begin
        ap_phi_reg_pp0_iter2_ref_tmp6_0_reg_138 <= zext_ln331_1_fu_398_p1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln327_reg_500 == 1'd1) & (icmp_ln323_reg_496 == 1'd0))) begin
        ap_phi_reg_pp0_iter2_ref_tmp6_0_reg_138 <= zext_ln328_fu_402_p1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_ref_tmp6_0_reg_138 <= ap_phi_reg_pp0_iter1_ref_tmp6_0_reg_138;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_ref_tmp10_0_reg_159 <= ap_phi_reg_pp0_iter0_ref_tmp10_0_reg_159;
        ap_phi_reg_pp0_iter1_ref_tmp6_0_reg_138 <= ap_phi_reg_pp0_iter0_ref_tmp6_0_reg_138;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln323_1_reg_537 <= icmp_ln323_1_fu_306_p2;
        icmp_ln323_reg_496 <= icmp_ln323_fu_220_p2;
        p_Result_5_reg_532 <= {{dst_dout[115:64]}};
        p_Result_7_reg_486 <= dst_dout[32'd63];
        p_Result_7_reg_486_pp0_iter1_reg <= p_Result_7_reg_486;
        p_Result_9_reg_527 <= dst_dout[32'd127];
        p_Result_9_reg_527_pp0_iter1_reg <= p_Result_9_reg_527;
        t_last_reg_480 <= eos_dout;
        t_last_reg_480_pp0_iter1_reg <= t_last_reg_480;
        trunc_ln315_reg_491 <= trunc_ln315_fu_216_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln323_1_fu_306_p2 == 1'd0))) begin
        icmp_ln327_1_reg_541 <= icmp_ln327_1_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln323_fu_220_p2 == 1'd0))) begin
        icmp_ln327_reg_500 <= icmp_ln327_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln327_1_fu_322_p2 == 1'd0) & (icmp_ln323_1_fu_306_p2 == 1'd0))) begin
        icmp_ln329_1_reg_545 <= icmp_ln329_1_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln327_fu_236_p2 == 1'd0) & (icmp_ln323_fu_220_p2 == 1'd0))) begin
        icmp_ln329_reg_504 <= icmp_ln329_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln329_1_fu_328_p2 == 1'd1) & (icmp_ln327_1_fu_322_p2 == 1'd0) & (icmp_ln323_1_fu_306_p2 == 1'd0))) begin
        icmp_ln330_1_reg_559 <= icmp_ln330_1_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln329_fu_242_p2 == 1'd1) & (icmp_ln327_fu_236_p2 == 1'd0) & (icmp_ln323_fu_220_p2 == 1'd0))) begin
        icmp_ln330_reg_518 <= icmp_ln330_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln329_fu_242_p2 == 1'd0) & (icmp_ln327_fu_236_p2 == 1'd0) & (icmp_ln323_fu_220_p2 == 1'd0))) begin
        sh_amt_1_reg_508 <= sh_amt_1_fu_248_p2;
        tmp_reg_513 <= {{sh_amt_1_fu_248_p2[9:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln329_1_fu_328_p2 == 1'd0) & (icmp_ln327_1_fu_322_p2 == 1'd0) & (icmp_ln323_1_fu_306_p2 == 1'd0))) begin
        sh_amt_3_reg_549 <= sh_amt_3_fu_334_p2;
        tmp_2_reg_554 <= {{sh_amt_3_fu_334_p2[9:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln330_1_fu_350_p2 == 1'd1) & (icmp_ln329_1_fu_328_p2 == 1'd1) & (icmp_ln327_1_fu_322_p2 == 1'd0) & (icmp_ln323_1_fu_306_p2 == 1'd0))) begin
        trunc_ln331_1_reg_563 <= trunc_ln331_1_fu_356_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln330_fu_264_p2 == 1'd1) & (icmp_ln329_fu_242_p2 == 1'd1) & (icmp_ln327_fu_236_p2 == 1'd0) & (icmp_ln323_fu_220_p2 == 1'd0))) begin
        trunc_ln331_reg_522 <= trunc_ln331_fu_270_p1;
    end
end

always @ (*) begin
    if (((t_last_read_fu_98_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_imag_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_real_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_imag_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_real_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_blk_n = dst_empty_n;
    end else begin
        dst_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_read = 1'b1;
    end else begin
        dst_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        eos_blk_n = eos_empty_n;
    end else begin
        eos_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        eos_read = 1'b1;
    end else begin
        eos_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        imag_out_TDATA_blk_n = imag_out_TREADY_int_regslice;
    end else begin
        imag_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imag_out_TVALID_int_regslice = 1'b1;
    end else begin
        imag_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        real_out_TDATA_blk_n = real_out_TREADY_int_regslice;
    end else begin
        real_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        real_out_TVALID_int_regslice = 1'b1;
    end else begin
        real_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((regslice_both_imag_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_real_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((eos_empty_n == 1'b0) | (dst_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((eos_empty_n == 1'b0) | (dst_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((eos_empty_n == 1'b0) | (dst_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((eos_empty_n == 1'b0) | (dst_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((imag_out_TREADY_int_regslice == 1'b0) | (real_out_TREADY_int_regslice == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((imag_out_TREADY_int_regslice == 1'b0) | (real_out_TREADY_int_regslice == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6 = ((regslice_both_imag_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_real_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_ref_tmp10_0_reg_159 = 'bx;

assign ap_phi_reg_pp0_iter0_ref_tmp6_0_reg_138 = 'bx;

assign icmp_ln323_1_fu_306_p2 = ((trunc_ln_fu_184_p4 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln323_fu_220_p2 = ((trunc_ln145_fu_180_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln327_1_fu_322_p2 = ((p_Result_4_fu_282_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln327_fu_236_p2 = ((p_Result_s_fu_202_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln329_1_fu_328_p2 = (($signed(sh_amt_2_fu_312_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln329_fu_242_p2 = (($signed(sh_amt_fu_226_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln330_1_fu_350_p2 = (($signed(sh_amt_2_fu_312_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln330_fu_264_p2 = (($signed(sh_amt_fu_226_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln337_1_fu_417_p2 = ((tmp_2_reg_554 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_371_p2 = ((tmp_reg_513 == 4'd0) ? 1'b1 : 1'b0);

assign imag_out_TDATA_int_regslice = ((p_Result_9_reg_527_pp0_iter1_reg[0:0] === 1'b1) ? sub_ln455_1_fu_466_p2 : ap_phi_reg_pp0_iter2_ref_tmp10_0_reg_159);

assign imag_out_TVALID = regslice_both_imag_V_data_V_U_vld_out;

assign lshr_ln331_1_fu_438_p2 = zext_ln320_1_fu_413_p1 >> zext_ln331_2_fu_435_p1;

assign lshr_ln331_fu_392_p2 = zext_ln320_fu_367_p1 >> zext_ln331_fu_389_p1;

assign p_Result_10_fu_406_p3 = {{1'd1}, {p_Result_5_reg_532}};

assign p_Result_4_fu_282_p4 = {{dst_dout[126:116]}};

assign p_Result_8_fu_360_p3 = {{1'd1}, {trunc_ln315_reg_491}};

assign p_Result_s_fu_202_p4 = {{dst_dout[62:52]}};

assign real_out_TDATA_int_regslice = ((p_Result_7_reg_486_pp0_iter1_reg[0:0] === 1'b1) ? sub_ln455_fu_452_p2 : ap_phi_reg_pp0_iter2_ref_tmp6_0_reg_138);

assign real_out_TVALID = regslice_both_real_V_data_V_U_vld_out;

assign sh_amt_1_fu_248_p2 = (10'd0 - trunc_ln326_fu_232_p1);

assign sh_amt_2_fu_312_p2 = (12'd1075 - zext_ln311_1_fu_292_p1);

assign sh_amt_3_fu_334_p2 = (10'd0 - trunc_ln326_1_fu_318_p1);

assign sh_amt_fu_226_p2 = (12'd1075 - zext_ln311_fu_212_p1);

assign shl_ln339_1_fu_429_p2 = zext_ln338_1_fu_422_p1 << zext_ln339_1_fu_426_p1;

assign shl_ln339_fu_383_p2 = zext_ln338_fu_376_p1 << zext_ln339_fu_380_p1;

assign sub_ln455_1_fu_466_p2 = (64'd0 - ap_phi_reg_pp0_iter2_ref_tmp10_0_reg_159);

assign sub_ln455_fu_452_p2 = (64'd0 - ap_phi_reg_pp0_iter2_ref_tmp6_0_reg_138);

assign t_last_read_fu_98_p2 = eos_dout;

assign trunc_ln145_fu_180_p1 = dst_dout[62:0];

assign trunc_ln315_fu_216_p1 = dst_dout[51:0];

assign trunc_ln326_1_fu_318_p1 = sh_amt_2_fu_312_p2[9:0];

assign trunc_ln326_fu_232_p1 = sh_amt_fu_226_p2[9:0];

assign trunc_ln331_1_fu_356_p1 = sh_amt_2_fu_312_p2[5:0];

assign trunc_ln331_fu_270_p1 = sh_amt_fu_226_p2[5:0];

assign trunc_ln_fu_184_p4 = {{dst_dout[126:64]}};

assign zext_ln311_1_fu_292_p1 = p_Result_4_fu_282_p4;

assign zext_ln311_fu_212_p1 = p_Result_s_fu_202_p4;

assign zext_ln320_1_fu_413_p1 = p_Result_10_fu_406_p3;

assign zext_ln320_fu_367_p1 = p_Result_8_fu_360_p3;

assign zext_ln328_1_fu_448_p1 = p_Result_10_fu_406_p3;

assign zext_ln328_fu_402_p1 = p_Result_8_fu_360_p3;

assign zext_ln331_1_fu_398_p1 = lshr_ln331_fu_392_p2;

assign zext_ln331_2_fu_435_p1 = trunc_ln331_1_reg_563;

assign zext_ln331_3_fu_444_p1 = lshr_ln331_1_fu_438_p2;

assign zext_ln331_fu_389_p1 = trunc_ln331_reg_522;

assign zext_ln338_1_fu_422_p1 = p_Result_10_fu_406_p3;

assign zext_ln338_fu_376_p1 = p_Result_8_fu_360_p3;

assign zext_ln339_1_fu_426_p1 = sh_amt_3_reg_549;

assign zext_ln339_fu_380_p1 = sh_amt_1_reg_508;

endmodule //fft_unpackComplex
