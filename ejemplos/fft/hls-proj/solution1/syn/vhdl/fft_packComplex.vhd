-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_packComplex is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    dst_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    dst_full_n : IN STD_LOGIC;
    dst_write : OUT STD_LOGIC;
    eos_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    eos_full_n : IN STD_LOGIC;
    eos_write : OUT STD_LOGIC;
    real_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    real_in_TVALID : IN STD_LOGIC;
    real_in_TREADY : OUT STD_LOGIC;
    real_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    real_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    imag_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    imag_in_TVALID : IN STD_LOGIC;
    imag_in_TREADY : OUT STD_LOGIC;
    imag_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    imag_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of fft_packComplex is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal dst_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal eos_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_last_V_reg_128 : STD_LOGIC_VECTOR (0 downto 0);
    signal real_in_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal imag_in_TDATA_blk_n : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_last_V_fu_99_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_88_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_temp_real_reg_137 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_91_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_temp_imag_reg_142 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal A_1_cast_i_fu_111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_0_cast_i_fu_108_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_88_ce : STD_LOGIC;
    signal grp_fu_91_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_real_V_data_V_U_apdone_blk : STD_LOGIC;
    signal real_in_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal real_in_TVALID_int_regslice : STD_LOGIC;
    signal real_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_real_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_real_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal real_in_TKEEP_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_real_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_real_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_real_V_last_V_U_apdone_blk : STD_LOGIC;
    signal real_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_real_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_real_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_imag_V_data_V_U_apdone_blk : STD_LOGIC;
    signal imag_in_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal imag_in_TVALID_int_regslice : STD_LOGIC;
    signal imag_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_imag_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_imag_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal imag_in_TKEEP_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_imag_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_imag_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_imag_V_last_V_U_apdone_blk : STD_LOGIC;
    signal imag_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_imag_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_imag_V_last_V_U_ack_in : STD_LOGIC;

    component fft_sitodp_64ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    sitodp_64ns_64_6_no_dsp_1_U1 : component fft_sitodp_64ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => real_in_TDATA_int_regslice,
        ce => grp_fu_88_ce,
        dout => grp_fu_88_p1);

    sitodp_64ns_64_6_no_dsp_1_U2 : component fft_sitodp_64ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => imag_in_TDATA_int_regslice,
        ce => grp_fu_91_ce,
        dout => grp_fu_91_p1);

    regslice_both_real_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => real_in_TDATA,
        vld_in => real_in_TVALID,
        ack_in => regslice_both_real_V_data_V_U_ack_in,
        data_out => real_in_TDATA_int_regslice,
        vld_out => real_in_TVALID_int_regslice,
        ack_out => real_in_TREADY_int_regslice,
        apdone_blk => regslice_both_real_V_data_V_U_apdone_blk);

    regslice_both_real_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => real_in_TKEEP,
        vld_in => real_in_TVALID,
        ack_in => regslice_both_real_V_keep_V_U_ack_in,
        data_out => real_in_TKEEP_int_regslice,
        vld_out => regslice_both_real_V_keep_V_U_vld_out,
        ack_out => real_in_TREADY_int_regslice,
        apdone_blk => regslice_both_real_V_keep_V_U_apdone_blk);

    regslice_both_real_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => real_in_TLAST,
        vld_in => real_in_TVALID,
        ack_in => regslice_both_real_V_last_V_U_ack_in,
        data_out => real_in_TLAST_int_regslice,
        vld_out => regslice_both_real_V_last_V_U_vld_out,
        ack_out => real_in_TREADY_int_regslice,
        apdone_blk => regslice_both_real_V_last_V_U_apdone_blk);

    regslice_both_imag_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => imag_in_TDATA,
        vld_in => imag_in_TVALID,
        ack_in => regslice_both_imag_V_data_V_U_ack_in,
        data_out => imag_in_TDATA_int_regslice,
        vld_out => imag_in_TVALID_int_regslice,
        ack_out => imag_in_TREADY_int_regslice,
        apdone_blk => regslice_both_imag_V_data_V_U_apdone_blk);

    regslice_both_imag_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => imag_in_TKEEP,
        vld_in => imag_in_TVALID,
        ack_in => regslice_both_imag_V_keep_V_U_ack_in,
        data_out => imag_in_TKEEP_int_regslice,
        vld_out => regslice_both_imag_V_keep_V_U_vld_out,
        ack_out => imag_in_TREADY_int_regslice,
        apdone_blk => regslice_both_imag_V_keep_V_U_apdone_blk);

    regslice_both_imag_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => imag_in_TLAST,
        vld_in => imag_in_TVALID,
        ack_in => regslice_both_imag_V_last_V_U_ack_in,
        data_out => imag_in_TLAST_int_regslice,
        vld_out => regslice_both_imag_V_last_V_U_vld_out,
        ack_out => imag_in_TREADY_int_regslice,
        apdone_blk => regslice_both_imag_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((eos_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                a_temp_imag_reg_142 <= grp_fu_91_p1;
                a_temp_real_reg_137 <= grp_fu_88_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_last_V_reg_128 <= real_in_TLAST_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, eos_full_n, ap_enable_reg_pp0_iter6, ap_CS_fsm_state9, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                if (((eos_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    A_0_cast_i_fu_108_p1 <= a_temp_real_reg_137;
    A_1_cast_i_fu_111_p1 <= a_temp_imag_reg_142;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(dst_full_n, eos_full_n, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, tmp_last_V_reg_128, ap_enable_reg_pp0_iter0, real_in_TVALID_int_regslice, imag_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((imag_in_TVALID_int_regslice = ap_const_logic_0) or (real_in_TVALID_int_regslice = ap_const_logic_0))) or ((tmp_last_V_reg_128 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (eos_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (dst_full_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(dst_full_n, eos_full_n, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, tmp_last_V_reg_128, ap_enable_reg_pp0_iter0, real_in_TVALID_int_regslice, imag_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((imag_in_TVALID_int_regslice = ap_const_logic_0) or (real_in_TVALID_int_regslice = ap_const_logic_0))) or ((tmp_last_V_reg_128 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (eos_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (dst_full_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(dst_full_n, eos_full_n, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, tmp_last_V_reg_128, ap_enable_reg_pp0_iter0, real_in_TVALID_int_regslice, imag_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((imag_in_TVALID_int_regslice = ap_const_logic_0) or (real_in_TVALID_int_regslice = ap_const_logic_0))) or ((tmp_last_V_reg_128 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (eos_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (dst_full_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(real_in_TVALID_int_regslice, imag_in_TVALID_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((imag_in_TVALID_int_regslice = ap_const_logic_0) or (real_in_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(eos_full_n, tmp_last_V_reg_128)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((tmp_last_V_reg_128 = ap_const_lv1_0) and (eos_full_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter6_assign_proc : process(dst_full_n)
    begin
                ap_block_state8_pp0_stage0_iter6 <= (dst_full_n = ap_const_logic_0);
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_last_V_fu_99_p1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_last_V_fu_99_p1 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, eos_full_n, ap_CS_fsm_state9)
    begin
        if (((eos_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    dst_blk_n_assign_proc : process(dst_full_n, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            dst_blk_n <= dst_full_n;
        else 
            dst_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_din <= (A_1_cast_i_fu_111_p1 & A_0_cast_i_fu_108_p1);

    dst_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            dst_write <= ap_const_logic_1;
        else 
            dst_write <= ap_const_logic_0;
        end if; 
    end process;


    eos_blk_n_assign_proc : process(eos_full_n, ap_block_pp0_stage0, ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_last_V_reg_128)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((tmp_last_V_reg_128 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            eos_blk_n <= eos_full_n;
        else 
            eos_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    eos_din_assign_proc : process(eos_full_n, ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_last_V_reg_128, ap_block_pp0_stage0_01001)
    begin
        if (((eos_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            eos_din <= ap_const_lv1_1;
        elsif (((tmp_last_V_reg_128 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            eos_din <= ap_const_lv1_0;
        else 
            eos_din <= "X";
        end if; 
    end process;


    eos_write_assign_proc : process(eos_full_n, ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_last_V_reg_128, ap_block_pp0_stage0_11001)
    begin
        if ((((tmp_last_V_reg_128 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((eos_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            eos_write <= ap_const_logic_1;
        else 
            eos_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_88_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_88_ce <= ap_const_logic_1;
        else 
            grp_fu_88_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_91_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_91_ce <= ap_const_logic_1;
        else 
            grp_fu_91_ce <= ap_const_logic_0;
        end if; 
    end process;


    imag_in_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, imag_in_TVALID_int_regslice)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imag_in_TDATA_blk_n <= imag_in_TVALID_int_regslice;
        else 
            imag_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imag_in_TREADY <= regslice_both_imag_V_data_V_U_ack_in;

    imag_in_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imag_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            imag_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(eos_full_n, ap_CS_fsm_state9)
    begin
        if (((eos_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_in_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, real_in_TVALID_int_regslice)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_in_TDATA_blk_n <= real_in_TVALID_int_regslice;
        else 
            real_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    real_in_TREADY <= regslice_both_real_V_data_V_U_ack_in;

    real_in_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            real_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_last_V_fu_99_p1 <= real_in_TLAST_int_regslice;
end behav;
